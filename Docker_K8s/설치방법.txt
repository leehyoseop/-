------------------------------------------------------------------------------------------------------------------------------------------------------
#####도커설치#####
su -
(비밀번호 모르면 sudo passwd root로 비밀번호 바꿔주기)
root@instance-2:~# apt-get update
root@instance-2:~# apt-get install apt-transport-https ca-certificates curl gnupg lsb-release
root@instance-2:~# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
root@instance-2:~# echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
root@instance-2:~# apt-get update && sudo apt-get install docker-ce docker-ce-cli containerd.io
root@instance-2:~# docker --version

root@instance-2:~# docker run --name oracle -d -p 1521:1521 jaspeen/oracle-xe-11g
root@instance-2:~# docker ps -a
------------------------------------------------------------------------------------------------------------------------------------------------------
#####Oracle#####
docker exec -it 70 sqlplus
(오라클 (70은 컨테이너 번호, docker ps -a 보고 컨테이너 앞글자 2개만 보고 적어도 괜찮다) 접속
(초기 아이디 비번은 system / orcale)

SQL> create user jin identified by 1234;
User created.
SQL> grant connect, resource to jin;
Grant succeeded.
SQL> create tablespace jin datafile 'C:\Uesrs\User\Documents\ts\ts.dbf' size 500m;
Tablespace created.
SQL> alter user jin default tablespace jin;
User altered.
(이렇게 여기 디비에 다시 내 계정 추가해주고 sql dev.에서 새 접속 만들어줘서 gcp 외부 아이피 입력해주고 접속 테스트 하면
gcp sqlplus에서 안만들어도 된다)
------------------------------------------------------------------------------------------------------------------------------------------------------
#####Jenkins#####
root@instance-2:~# mkdir /jenkins
root@instance-2:~# chown -R 1000:1000 /jenkins
root@instance-2:~# docker run --name jenkins -d -p 8080:8080 -p 50000:50000 -v /var/run/docker.sock:/var/run/docker.sock -v /jenkins:/var/jenkins_home jenkins/jenkins:lts
root@instance-2:~# chmod 666 /var/run/docker.sock

root@instance-2:~# docker exec -it --user 0 jenkins /bin/bash
root@d687845c09e8:/# apt-get update
root@d687845c09e8:/# apt-get install apt-transport-https ca-certificates curl gnupg lsb-release
root@d687845c09e8:/# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
root@d687845c09e8:/# echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu bionic stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null root@d687845c09e8:/# apt-get update && apt-get install docker-ce-cli
root@d687845c09e8:/# apt-get update && apt-get install docker-ce-cli
root@d687845c09e8:/# docker ps -a 
root@d687845c09e8:/# exit

http://34.125.151.119:8080/ 크롬접속 (내 gcp 외부 ip)
gcp에서 
root@instance-2:~# docker logs jenkins
(초기비밀번호 가져오기 
크롬 접속한거에 비밀번호 붙여놓기
------------------------------------------------------------------------------------------------------------------------------------------------------
#####도커 Pull|Push#####
#nginx 이미지 다운로드 ➜ ~docker pull nginx
#다운받은 이미지 확인 ➜ ~ docker image ls
#다운받은 nginx 이미지를 webserver라는 컨테이너 이름을 붙여 구동하기 ➜ ~ docker container run --name webserver -d -p 80:80 nginx
이때 GCP에 올렸으면 해당 외부포트로 접근해서 확인해야한다. 

#Push 하기 ➜ (로그인 한뒤에) 태그 바꿔주기 ~docker image tag [지금 이름][바꿀 이름] 
인데 [바꿀 이름]에는 내 도커 아이디/이미지이름
Ex)docker image tag datasolution_test:1.0 0303hslee/hsdatasolution_test:2.0
그 다음에 docker push 0303hslee/hsdatasolution_test:2.0 이렇게 올린다.
------------------------------------------------------------------------------------------------------------------------------------------------------
#####Kubernetes#####
kubeadm: 클러스터를 부트스트랩하는 명령이다.
kubelet: 클러스터의 모든 머신에서 실행되는 파드와 컨테이너 시작과 같은 작업을 수행하는 컴포넌트이다.
kubectl: 클러스터와 통신하기 위한 커맨드 라인 유틸리티이다.

아래 방법으로 하면 최신버전으로 다운해서 오류 가능성.
//#apt-get update
//#apt-get install -y apt-transport-https ca-certificates curl
//#sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
//#echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee ///etc/apt/sources.list.d/kubernetes.list
//#sudo apt update
//#sudo apt install kubelet kubeadm kubectl kubernetes-cni
//#sudo apt-mark hold kubelet kubeadm kubectl

➜ 쿠버네티스는 최신으로 하지 않는다.(위 방법으로 안하는게 나은듯)

# 쿠버네테스 초기화 및 정지
kubeadm reset
systemctl stop kubelet
systemctl stop docker
# 쿠버네티스 네트워크 설정 삭제
ip link delete cni0
ip link delete flannel.1
# 쿠버네티스 관련 파일 삭제
rm -rf /var/lib/cni/
rm -rf /var/lib/kubelet/*
rm -rf /var/lib/etcd/
rm -rf /run/flannel
rm -rf /etc/cni/
rm -rf /etc/kubernetes
rm -rf ~/.kube
# 쿠버네티스 관련 패키지 삭제
sudo apt-get purge kubeadm kubectl kubelet
sudo apt-get autoremove
# 쿠버네티스 다시 설치
apt-get install kubeadm=1.20.5-00 ➜ kubelet kubectl도 해준다.
sudo apt-mark hold kubelet kubeadm kubectl
kubelet --version
# 쿠버네티스 클러스터 설정(Master가 아닌 Worker Node에서 작업해주는 명령어)
kubeadm join 10.138.0.2:6443 --token rtql3e.v4dkfgig0102ihkp \
    --discovery-token-ca-cert-hash sha256:796a60ce8f0d042263696859acf0420a32e578eaecda62e1ae8d8df49371e2a6
2번째 노드가 안될때는 kubeadm reset해주고 다시 하면 된다.
# Weavenet 설치
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
# Weavenet 삭제
kubectl delete -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
# K로 짧게 쓰기
~/.zshrc 파일에 아래를 추가.
alias k=kubectl
complete -F __start_kubectl k
저장 후 source ~/.zshrc
# Calico 설치(https://cwal.tistory.com/m/12)
# curl https://docs.projectcalico.org/archive/v3.17/manifests/calico.yaml -O
#kubectl apply -f calico.yaml
# 현재 경로에 calicoctl binary 다운로드
curl -O -L  https://github.com/projectcalico/calicoctl/releases/download/v3.17.1/calicoctl
# +x 모드 추가 
chmod +x calicoctl
# 아무 경로에서 사용 가능하도록 PATH에 등록된 곳(ex: /usr/local/bin)으로 파일 이동
sudo mv calicoctl /usr/local/bin
# Helm 설치
curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash --> 설치
helm version --short --> 버전확인
helm repo add stable https://charts.helm.sh/stable --> 저장소 추가
helm completion bash >> ~/.bash_completion 
. /etc/profile.d/bash_completion.sh
. ~/.bash_completion
source <(helm completion bash)
-----helm command를 위한 bash환경 구성
helm repo udpate --> 저장소 업데이트
helm repo add bitnami https://charts.bitnami.com/bitnami --> nginx 테스트 하는데 기본차트에는 nginx 단독서버가 없어서 여기 레파지토리 추가
helm search repo bitnami/nginx --> 검색해서 나오면 된거다.
-----여기까지만 테스트해서 나오면 헬름차트 테스트 성공
-----여기서부터는 자유 
Install bitami/nginx -->설치
-----김정헌형 helm통해서 nginx 설치
  125  curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
  126  chmod 700 get_helm.sh
  127  ./get_helm.sh
  128  helm version
  130  helm search repo stable
  131  helm repo add stable https://charts.helm.sh/stable
  135  source <(helm completion bash)
  136  helm completion bash >> ~/.bash_completion
  137  . /etc/profile.d/bash_completion.sh
  138  . ~/.bash_completion
  139  source <(helm completion bash)
  140  helm repo udpate
  141  helm repo add bitnami https://charts.bitnami.com/bitnami
  142  helm search repo bitnami/nginx
  145  helm install mywebserver bitnami/nginx
  146  k get svc,po,deploy
  147  k describe deployment mywebserver
  148  history
